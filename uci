#!/usr/bin/env bash
set -e

# ------------------------------------------------------------------------------------------------------------
## Âµci is a tiny CI script that can be embedded in containers
#
## Copyright (c) 2016 Pooya Parsa - MIT
#
## Usage : uci [command]
##Available commands:
#
# Some useful references:
#    https://github.com/blog/1270
# ------------------------------------------------------------------------------------------------------------

# -----------------------------------------------------------------------------------
# bootstrap - called after script initialization
# -----------------------------------------------------------------------------------
bootstrap(){
    # Environment variables
    WORKSPACE=${UCI_WORKSPACE:-$PWD}
    REPO=${UCI_REPO}
    TOKEN=${UCI_TOKEN}
    HOOK_SCRIPT=${UCI_HOOK_SCRIPT:-true}
    WATCH_INTERVAL=${UCI_WATCH_INTERVAL:-60}

    # Inject token to repo, if https
    REPO=`echo ${REPO} | sed "s|https://|https://${TOKEN}:x-oauth-basic@|"`

    # Keep script path before any cd. used for usage command
    SCRIPT=`readlink $0`
    SCRIPT_PATH=`realpath $0`

    # cd to workspace
    cd ${WORKSPACE}

    # Ensure .git exists
    if [ ! -d .git ]; then
        git init
    fi

    # Dispatch command
    case $1 in
        pull)
            pull
        ;;
        watch)
            watch
        ;;
        --help)
            usage
        ;;
        run) 
            shift
            run_command $@
        ;;
    esac
}

# -----------------------------------------------------------------------------------
## pull - pull latest commit from origin
# -----------------------------------------------------------------------------------
pull(){
    CommitA=`get_commit`
    log "Pulling git repo"
    git pull ${REPO} 1>&2 2>/dev/null
    CommitB=`get_commit`

    if [ ${CommitA} != ${CommitB} ]; then
        onCommit ${CommitA} ${CommitB}
    fi
}

# -----------------------------------------------------------------------------------
## watch - pull with time intervals
# -----------------------------------------------------------------------------------
watch(){
    log "Watching repo for changes"
    while [ true ] ; do
        pull
        log "Sleeping for ${WATCH_INTERVAL} seconds..."
        sleep ${WATCH_INTERVAL}
    done
}

# -----------------------------------------------------------------------------------
# log
# -----------------------------------------------------------------------------------
log(){
    echo "[uci] [`date +"%D %T"`]" $@
}

# -----------------------------------------------------------------------------------
# get_commit - get current commit
# -----------------------------------------------------------------------------------
get_commit(){
    git rev-parse HEAD 2>/dev/null
}

# -----------------------------------------------------------------------------------
# onCommit - execute onCommit tasks
# -----------------------------------------------------------------------------------
onCommit(){
    log "Commit $1 ~> $2"
    echo ${HOOK_SCRIPT} $1 $2 | bash
}

# -----------------------------------------------------------------------------------
## --help - print script usage
# -----------------------------------------------------------------------------------
usage(){
    cat $SCRIPT_PATH | grep "^##" | grep -o "[^#]*"
}

# -----------------------------------------------------------------------------------
## run command - run command and watch in background
# -----------------------------------------------------------------------------------
run_command(){
    
    # Pull for first time before continue
    pull

    # Run watch in background and main command in forground
    # This way we can properly handle and return main command errors
    $SCRIPT watch &
    WATCH_PID=$!
   
    # Run real command
    echo $@ | bash
    
    # Clean exit
    log "Process finished with status code $?"
    log "Shutting down"
    kill -9 $WATCH_PID
    exit $?
}

# -----------------------------------------------------------------------------------
bootstrap $@
