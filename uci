#!/usr/bin/env bash

# ------------------------------------------------------------------------------------------------------------
## µci is a tiny CI script that can be embedded in containers
#
## Copyright (c) 2016 Pooya Parsa - MIT
#
## Usage : uci [command]
##Available commands:
#
# Some useful references:
#    https://github.com/blog/1270
# ------------------------------------------------------------------------------------------------------------

# -----------------------------------------------------------------------------------
# bootstrap - called after script initialization
# -----------------------------------------------------------------------------------
bootstrap(){
    # Environment variables
    WORKSPACE=${UCI_WORKSPACE:-$PWD}
    REPO=${UCI_REPO}
    TOKEN=${UCI_TOKEN}
    HOOK_SCRIPT=${UCI_HOOK_SCRIPT:-true}
    WATCH_INTERVAL=${UCI_WATCH_INTERVAL:-60}

    # Inject token to repo, if https
    REPO=`echo ${REPO} | sed "s|https://|https://${TOKEN}:x-oauth-basic@|"`

    # Keep script path before any cd. used for usage command
    SCRIPT=`readlink $0`
    SCRIPT_PATH=`realpath $0`
    
    # PID file to keep handle to background runnig daemon
    DAEMON_PID_FILE=/tmp/uci_$$.pid
    
    # cd to workspace
    cd ${WORKSPACE}

    # Ensure .git exists
    if [ ! -d .git ]; then
        git init
    fi

    # Dispatch command
    case $1 in
        pull)
            pull
        ;;
        watch)
            watch
        ;;
        --help)
            usage
        ;;
        daemon) 
            shift
            start_daemon $@
        ;;
    esac
}

# -----------------------------------------------------------------------------------
## pull [command] - pull latest commit from origin, then call hook and command if provided
# -----------------------------------------------------------------------------------
pull(){
    CommitA=`get_commit`
    debug "Pulling git repo"
    git pull --quiet ${REPO}
    CommitB=`get_commit`

    if [ ${CommitA} != ${CommitB} ]; then
        # Call hook 
        on_commit ${CommitA} ${CommitB}
        
        # Run arguments as command if provided
        if [ ! -z $@ ]; then
            echo $@ | bash
        fi
    fi
}

# -----------------------------------------------------------------------------------
## watch [command] - pull with time intervals
# -----------------------------------------------------------------------------------
watch(){
    log "Watching repo for changes every ${WATCH_INTERVAL} seconds..."
    while [ true ] ; do
        pull $@
        debug "Sleeping for ${WATCH_INTERVAL} seconds"
        sleep ${WATCH_INTERVAL}
    done
}

# -----------------------------------------------------------------------------------
# log
# -----------------------------------------------------------------------------------
log(){
    echo -e "[µci][`date +"%D %T"`]\t" $@
}

# -----------------------------------------------------------------------------------
# debug 
# -----------------------------------------------------------------------------------
debug(){
    [ ! -z $UCI_DEBUG ] && log $@
}


# -----------------------------------------------------------------------------------
# get_commit - get current commit
# -----------------------------------------------------------------------------------
get_commit(){
    git rev-parse HEAD 2>/dev/null
}

# -----------------------------------------------------------------------------------
# on_commit - execute on_commit tasks
# -----------------------------------------------------------------------------------
on_commit(){
    log "Commit $1 ~> $2"
    echo ${HOOK_SCRIPT} $1 $2 | bash
}

# -----------------------------------------------------------------------------------
## --help - print script usage
# -----------------------------------------------------------------------------------
usage(){
    cat $SCRIPT_PATH | grep "^##" | grep -o "[^#]*"
}

# -----------------------------------------------------------------------------------
# loop
# -----------------------------------------------------------------------------------
loop(){
    while [ true ] ; do
        log Starting daemon $@
        echo $@ | bash &
        echo "$!" > ${DAEMON_PID_FILE}
        log Daemon running with PID $!
        wait $!
        log Daemon exited with code $?
        sleep 1
    done
}

# -----------------------------------------------------------------------------------
# try_kill
# -----------------------------------------------------------------------------------
try_kill(){
    name=$1
    shift
    if [ ! -z $@ ] ; then
        log "Killing $name ($@)"
        kill $@ 2>/dev/null
    fi
}

# -----------------------------------------------------------------------------------
# kill daemon
# -----------------------------------------------------------------------------------
kill_daemon(){
     if [ -f $DAEMON_PID_FILE ] ; then
        DAEMON_PID=`cat $DAEMON_PID_FILE`
        try_kill "process" $DAEMON_PID
        rm $DAEMON_PID_FILE
    fi
}

# -----------------------------------------------------------------------------------
# cleanup
# -----------------------------------------------------------------------------------
cleanup(){
    try_kill "loop" $LOOP_PID
    kill_daemon
}
 
# ----------------------------------------------------------------------------------
## daemon [command] - run command as command and watch in background
# -----------------------------------------------------------------------------------
start_daemon(){
    
    # Pull for first time before continue
    pull
   
    # Fork command with infinity loop
    (loop $@) &
    LOOP_PID=$!

    # Start watching
    watch kill_daemon
}

# -----------------------------------------------------------------------------------
trap cleanup EXIT
bootstrap $@
